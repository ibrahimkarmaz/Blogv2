#pragma checksum "C:\Users\ibrah\OneDrive\Masaüstü\Core5Portolio2023\Core5Portolio2023\Views\Experience\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e611033b647147d7b2cb0acf1210824d6ee2697d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Experience_Index), @"mvc.1.0.view", @"/Views/Experience/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\ibrah\OneDrive\Masaüstü\Core5Portolio2023\Core5Portolio2023\Views\_ViewImports.cshtml"
using Core5Portolio2023;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ibrah\OneDrive\Masaüstü\Core5Portolio2023\Core5Portolio2023\Views\_ViewImports.cshtml"
using Core5Portolio2023.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e611033b647147d7b2cb0acf1210824d6ee2697d", @"/Views/Experience/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1823000a85f965eb4c95aa8f390f8bf2e184bb79", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Experience_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\ibrah\OneDrive\Masaüstü\Core5Portolio2023\Core5Portolio2023\Views\Experience\Index.cshtml"
  
	ViewData["Title"] = "Index";
	Layout = "~/Views/Shared/_AdminLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div class=""text-center"">
	<h1>Deneyim Sayfası</h1>
	<p>Deneyim(İş, Danışmanlık, Eğitim vb) işlemlerinizi yapabilir veya Özgeçmiş sayfa görünülüklerini düzenleyebilirsiniz.</p>
</div>
<div class=""d-flex flex-column flex-md-row"">
	<button class=""btn btn-outline-dark flex-fill m-1 shadow"" id=""experienceadd"">
		<i class=""bi bi-plus-circle-fill""></i> Yeni Deneyim
	</button>
	<button class=""btn btn-outline-dark flex-fill  m-1 shadow"" id=""getlist"">
		<i class=""bi bi-list""></i>
		Listele/Yenile
	</button>
	<button class=""btn btn-outline-dark flex-fill  m-1 shadow"" onclick=ExcelList()>
		<i class=""bi bi-cloud-arrow-down-fill""></i>
		Excel Döküman İndir
	</button>
</div>






<div id=""experiencelist"">
	Deneyim Listesi
</div>
");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
	<script>
		function ExcelList() {
			window.open(""/Experience/ExportExcelList"");
		};
		function GetListX() {
			$.ajax({
				contentType: ""application/json"",
				dataType: ""json"",
				type: ""Get"",
				url: ""/Experience/ExperienceList"",
				success: function (func) {
					let w = jQuery.parseJSON(func);
					console.log(w);
					let tablehtml = ""<table class='table table-light table-responsive text-center shadow'>"" +
						""<thead>"" +
						""<tr>"" +
						""<th>#</th><th>Firma Adı</th><th>Meslek Adı</th><th>Başlangıç Yılı</th><th>Bitiş Yılı</th><th>Çalışma Durumu</th><th>Sayfa Durumu</th><th>Aksiyon</th>"" +
						""</tr>"" +
						""</thead>"" +
						""<tbody class='table-hover'>"";
					$.each(w, (index, value) => {
						let id = value.ExperienceID.toString();
						tablehtml += `<tr>
																		<th>${id}</th>
																		<td>${value.ExperienceCompanyName}</td>
																				<td>${value.ExperienceJobName}</td>
																				<td> `; let startyear = new Date(val");
                WriteLiteral(@"ue.ExperienceStartYear).getFullYear();

						tablehtml += `	${startyear}	</td>
																						<td>`; let stopyear = new Date(value.ExperienceStopYear).getFullYear();
						tablehtml += `${stopyear} </td>
														<td>`;


						if (value.ExperienceContinue == true) {
							tablehtml += `	<span class=""badge rounded-pill bg-warning text-dark"">Evet</span> `;
						}
						else {
							tablehtml += `<span class=""badge rounded-pill bg-light text-dark"">Hayır</span>`;
						}


						tablehtml += `	</td>
																<td>`;
						if (value.ExperienceArchive == true) {
							tablehtml += `	<span class=""badge rounded-pill bg-success"">Açık</span> `;
						}
						else {
							tablehtml += `	<span class=""badge rounded-pill bg-danger""> Kapalı </span> `;
						}

						tablehtml += `	</td>

														<td>
															<!-- Example single danger button -->
															<div class=""btn-group"">
																<button type=""button"" class=""btn btn-danger dropdown-toggl");
                WriteLiteral(@"e rounded-pill"" data-bs-toggle=""dropdown"" aria-expanded=""false""></button>
																<ul class=""dropdown-menu"">
																											<li><a class=""dropdown-item"" onclick=ExperienceUpdate(""${id}""); ><i class=""bi bi-pencil-fill"" ></i> Düzenle</a></li>
																					<li><a class=""dropdown-item"" onclick=ExperienceDelete(""${id}"");><i class=""bi bi-trash3-fill""></i> Sil</a></li>
																	<li><hr class=""dropdown-divider""></li>
																																							<li><a class=""dropdown-item"" onclick=ExperiencePagesSet(""${id}"");><i class=""bi bi-gear-fill"" ></i> Sayfa durumunu değiştir</a></li>
																	<li><hr class=""dropdown-divider""></li>
																															<li><a class=""dropdown-item"" onclick=ExperienceContentGet(""${id}"");><i class=""bi bi-eye-fill"" ></i> Deneyim içeriğini göster</a></li>
																</ul>
															</div>
														</td>
													</tr>`;
					});
					tablehtml += ""	</tbody></table>"";
					$(""#experiencelist"").html(table");
                WriteLiteral(@"html);
				}
			});
		}

		$(document).ready(function () {

			GetListX();
			var myModal = new bootstrap.Modal(document.getElementById('myModal'), {
				keyboard: false
			})
			myModal.dispose();

		});

		$(""#getlist"").click(function () {
			GetListX();
		});

		function ExperiencePagesSet(a) {
			console.log(a);
			$.ajax({
				contentType: ""application/json"",
				dataType: ""json"",
				type: ""get"",
				url: ""/Experience/StatusPagesSet/"" + a,
				data: { id: a },
				success: function (func) {
					GetListX();
				}
			});
		};

		function ExperienceDelete(a) {

			Swal.fire({
				title: 'Emin misiniz?',
				text: ""Seçilen bilgiler silinicektir."",
				icon: 'Uyarı',
				showCancelButton: true,
				confirmButtonColor: '#3085d6',
				cancelButtonColor: '#d33',
				confirmButtonText: 'Evet',
				cancelButtonText: 'Hayır',
			}).then((result) => {

				if (result.isConfirmed) {
					FDelete(a);//Silme İşlemi (Evet demesi durumunda)
					const Toast = Swal.mixin({");
                WriteLiteral(@"
						toast: true,
						position: 'top-end',
						showConfirmButton: false,
						timer: 2000,
						timerProgressBar: true,
						didOpen: (toast) => {
							toast.addEventListener('mouseenter', Swal.stopTimer)
							toast.addEventListener('mouseleave', Swal.resumeTimer)
						}
					})

					Toast.fire({
						icon: 'success',
						title: 'Silindi!'
					})
				}
			})
		};

		function FDelete(a) {
			console.log(a);
			$.ajax({
				contentType: ""application/json"",
				dataType: ""json"",
				type: ""post"",
				url: ""/Experience/ExperienceDelete/"" + a,
				success: function (func) {
					GetListX();
				}
			});
		}

		function ExperienceContentGet(a) {
			console.log(a);
			$.ajax({
				contentType: ""application/json"",
				dataType: ""json"",
				type: ""post"",
				url: ""/Experience/ExperienceContent/"" + a,
				success: function (func) {
					let exp = jQuery.parseJSON(func);
					console.log(exp);
					Swal.fire(
						exp.ExperienceCompanyName,
						exp.Exper");
                WriteLiteral(@"ienceContext,
						'info'
					)
				}
			});
		}


		$(""#experienceadd"").click(async function () {

			console.log(""dasd"");
			const { value: formValues } = await Swal.fire({
				title: 'Yeni Deneyim',
				showCancelButton: true,
				cancelButtonColor: '#d43f3a',
				cancelButtonText: 'İptal Et',
				confirmButtonText: 'Kaydet',
				confirmButtonColor: '#337ab7',
				html:
					'<input id=""ExperienceCompanyName"" placeholder=""Firma Adını Giriniz"" class=""swal2-input"">' +
					'<input id=""ExperienceJobName"" placeholder=""Meslek Adını Giriniz"" class=""swal2-input"">' +
					'<input id=""ExperienceStartYear"" placeholder=""Başlangıç Yılı (00.00.0000)"" class=""swal2-input"">' +
					'<input id=""ExperienceStopYear"" placeholder=""Bitiş Yılı (00.00.0000)"" class=""swal2-input"">' +
					'<textarea rows=""10"" cols=""22"" id=""ExperienceContext"" placeholder=""Firma içinde ne iş yaptığınız hakkında bilgi veriniz."" class=""swal2-textarea""> </textarea>' +
					'<h5>Devam Ediyorum <input type=""checkbox"" id=""Experien");
                WriteLiteral(@"ceContinue"" /></h5><p/>' +
					'<h5>Özgeçmiş sayfasında gösterme <input type=""checkbox"" id=""ExperienceArchive"" /></h5>',
				focusConfirm: false,
				preConfirm: () => {
					
					return [
						document.getElementById('ExperienceCompanyName').value,
						document.getElementById('ExperienceJobName').value,
						document.getElementById('ExperienceStartYear').value,
						document.getElementById('ExperienceStopYear').value,
						document.getElementById('ExperienceContext').value,
						document.getElementById('ExperienceContinue').checked,
						document.getElementById('ExperienceArchive').checked
						
					]
				}
			});
			//Checkbox'tan veri getir. ve gönder.
			$.ajax({
				url: '/Experience/AddExperience/',
				type: 'Post',
				dataType: 'json',
				data: {
					ExperienceCompanyName: formValues[0],
					ExperienceJobName: formValues[1],
					ExperienceStartYear: formValues[2],
					ExperienceStopYear: formValues[3],
					ExperienceContext: formValues[4],
					Experience");
                WriteLiteral(@"Continue: formValues[5],
					ExperienceArchive: formValues[6]

				},
				success: function (gelen) {
				const Toast = Swal.mixin({
						toast: true,
						position: 'top-end',
						showConfirmButton: false,
						timer: 2000,
						timerProgressBar: true,
						didOpen: (toast) => {
							toast.addEventListener('mouseenter', Swal.stopTimer)
							toast.addEventListener('mouseleave', Swal.resumeTimer)
						}
					})

					Toast.fire({
						icon: 'success',
						title: 'Kaydedildi!'
					})
					GetListX();
				}
			});

		});
		function ExperienceUpdate(id) {
			console.log(id);
			$.ajax({
				contentType: ""application/json"",
				dataType: ""json"",
				type: ""post"",
				url: ""/Experience/UpdateExperienceGet/"" + id,
				success: function (func) {
					let exp=jQuery.parseJSON(func);

					ModalWindowsOpenWithData(exp);
				}
			});
		};

		async function ModalWindowsOpenWithData(data){
			let date = new Date(data.ExperienceStartYear);
			let dateconvert = dat");
                WriteLiteral(@"e.getDay() + ""."" + (date.getMonth() + 1) +  ""."" + date.getFullYear();
			date = new Date(data.ExperienceStopYear);
			let dateconvertstop = date.getDay() + ""."" + (date.getMonth() + 1) +  ""."" + date.getFullYear();
			const { value: formValuesGet } = await Swal.fire({
				title: 'Deneyimi Düzenle',
				showCancelButton: true,
				cancelButtonColor: '#d43f3a',
				cancelButtonText: 'İptal Et',
				confirmButtonText: 'Düzenle',
				confirmButtonColor: '#32CD32',
				html:
					'<input id=""ExperienceCompanyNameGet"" placeholder=""Firma Adını Giriniz"" class=""swal2-input"" value=' + data.ExperienceCompanyName + '>' +
					'<input id=""ExperienceJobNameGet"" placeholder=""Meslek Adını Giriniz"" class=""swal2-input"" value=' + data.ExperienceJobName + '>' +
					'<input id=""ExperienceStartYearGet"" placeholder=""Başlangıç Yılı (00.00.0000)"" class=""swal2-input"" value=' + dateconvert + '>' +
					'<input id=""ExperienceStopYearGet"" placeholder=""Bitiş Yılı (00.00.0000)"" class=""swal2-input"" value=' + dateconvertstop + '");
                WriteLiteral(@"> ' +
					'<textarea rows=""10"" cols=""22"" id=""ExperienceContextGet"" placeholder=""Firma içinde ne iş yaptığınız hakkında bilgi veriniz."" class=""swal2-textarea""> ' + data.ExperienceContext + ' </textarea>' +
					'<h5>Devam Ediyorum <input type=""checkbox"" id=""ExperienceContinueGet"" ' + (data.ExperienceContinue ? 'checked' : '') + '/></h5><p/>' +
					'<h5>Özgeçmiş sayfasında gösterme <input type=""checkbox"" id=""ExperienceArchiveGet"" ' + (data.ExperienceArchive ? 'checked' : '') + ' /></h5>',
				focusConfirm: false,
				preConfirm: () => {

					return [
						data.ExperienceID,
						document.getElementById('ExperienceCompanyNameGet').value,
						document.getElementById('ExperienceJobNameGet').value,
						document.getElementById('ExperienceStartYearGet').value,
						document.getElementById('ExperienceStopYearGet').value,
						document.getElementById('ExperienceContextGet').value,
						document.getElementById('ExperienceContinueGet').checked,
						document.getElementById('ExperienceArchiveGe");
                WriteLiteral(@"t').checked

					]
				}
			});
			//dsdas
			console.log('dada')
			$.ajax({
				url: '/Experience/UpdateExperience/',
				type: 'Post',
				dataType: 'json',
				data: {
						ExperienceID: formValuesGet[0],
					ExperienceCompanyName: formValuesGet[1],
					ExperienceJobName: formValuesGet[2],
					ExperienceStartYear: formValuesGet[3],
					ExperienceStopYear: formValuesGet[4],
					ExperienceContext: formValuesGet[5],
					ExperienceContinue: formValuesGet[6],
					ExperienceArchive: formValuesGet[7],
				

				},
				success: function (getdate) {
					const Toast = Swal.mixin({
						toast: true,
						position: 'top-end',
						showConfirmButton: false,
						timer: 2000,
						timerProgressBar: true,
						didOpen: (toast) => {
							toast.addEventListener('mouseenter', Swal.stopTimer)
							toast.addEventListener('mouseleave', Swal.resumeTimer)
						}
					})

					Toast.fire({
						icon: 'success',
						title: 'Düzenlendi!'
					})
					GetListX();
				");
                WriteLiteral("}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t};\r\n\r\n\t</script>\r\n");
            }
            );
            WriteLiteral("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.2/font/bootstrap-icons.css\">\r\n\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
