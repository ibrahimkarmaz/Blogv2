@{
	ViewData["Title"] = "Index";
	Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="text-center">
	<h1>Deneyim Sayfası</h1>
	<p>Deneyim(İş, Danışmanlık, Eğitim vb) işlemlerinizi yapabilir veya Özgeçmiş sayfa görünülüklerini düzenleyebilirsiniz.</p>
</div>
<div class="d-flex flex-column flex-md-row">
	<button class="btn btn-outline-dark flex-fill m-1 shadow" id="experienceadd">
		<i class="bi bi-plus-circle-fill"></i> Yeni Deneyim
	</button>
	<button class="btn btn-outline-dark flex-fill  m-1 shadow" id="getlist">
		<i class="bi bi-list"></i>
		Listele/Yenile
	</button>
	<button class="btn btn-outline-dark flex-fill  m-1 shadow" onclick=ExcelList()>
		<i class="bi bi-cloud-arrow-down-fill"></i>
		Excel Döküman İndir
	</button>
</div>






<div id="experiencelist">
	Deneyim Listesi
</div>
@section scripts{
	<script>
		function ExcelList() {
			window.open("/Experience/ExportExcelList");
		};
		function GetListX() {
			$.ajax({
				contentType: "application/json",
				dataType: "json",
				type: "Get",
				url: "/Experience/ExperienceList",
				success: function (func) {
					let w = jQuery.parseJSON(func);
					console.log(w);
					let tablehtml = "<table class='table table-light table-responsive text-center shadow'>" +
						"<thead>" +
						"<tr>" +
						"<th>#</th><th>Firma Adı</th><th>Meslek Adı</th><th>Başlangıç Yılı</th><th>Bitiş Yılı</th><th>Çalışma Durumu</th><th>Sayfa Durumu</th><th>Aksiyon</th>" +
						"</tr>" +
						"</thead>" +
						"<tbody class='table-hover'>";
					$.each(w, (index, value) => {
						let id = value.ExperienceID.toString();
						tablehtml += `<tr>
																		<th>${id}</th>
																		<td>${value.ExperienceCompanyName}</td>
																				<td>${value.ExperienceJobName}</td>
																				<td> `; let startyear = new Date(value.ExperienceStartYear).getFullYear();

						tablehtml += `	${startyear}	</td>
																						<td>`; let stopyear = new Date(value.ExperienceStopYear).getFullYear();
						tablehtml += `${stopyear} </td>
														<td>`;


						if (value.ExperienceContinue == true) {
							tablehtml += `	<span class="badge rounded-pill bg-warning text-dark">Evet</span> `;
						}
						else {
							tablehtml += `<span class="badge rounded-pill bg-light text-dark">Hayır</span>`;
						}


						tablehtml += `	</td>
																<td>`;
						if (value.ExperienceArchive == true) {
							tablehtml += `	<span class="badge rounded-pill bg-success">Açık</span> `;
						}
						else {
							tablehtml += `	<span class="badge rounded-pill bg-danger"> Kapalı </span> `;
						}

						tablehtml += `	</td>

														<td>
															<!-- Example single danger button -->
															<div class="btn-group">
																<button type="button" class="btn btn-danger dropdown-toggle rounded-pill" data-bs-toggle="dropdown" aria-expanded="false"></button>
																<ul class="dropdown-menu">
																											<li><a class="dropdown-item" onclick=ExperienceUpdate("${id}"); ><i class="bi bi-pencil-fill" ></i> Düzenle</a></li>
																					<li><a class="dropdown-item" onclick=ExperienceDelete("${id}");><i class="bi bi-trash3-fill"></i> Sil</a></li>
																	<li><hr class="dropdown-divider"></li>
																																							<li><a class="dropdown-item" onclick=ExperiencePagesSet("${id}");><i class="bi bi-gear-fill" ></i> Sayfa durumunu değiştir</a></li>
																	<li><hr class="dropdown-divider"></li>
																															<li><a class="dropdown-item" onclick=ExperienceContentGet("${id}");><i class="bi bi-eye-fill" ></i> Deneyim içeriğini göster</a></li>
																</ul>
															</div>
														</td>
													</tr>`;
					});
					tablehtml += "	</tbody></table>";
					$("#experiencelist").html(tablehtml);
				}
			});
		}

		$(document).ready(function () {

			GetListX();
			var myModal = new bootstrap.Modal(document.getElementById('myModal'), {
				keyboard: false
			})
			myModal.dispose();

		});

		$("#getlist").click(function () {
			GetListX();
		});

		function ExperiencePagesSet(a) {
			console.log(a);
			$.ajax({
				contentType: "application/json",
				dataType: "json",
				type: "get",
				url: "/Experience/StatusPagesSet/" + a,
				data: { id: a },
				success: function (func) {
					GetListX();
				}
			});
		};

		function ExperienceDelete(a) {

			Swal.fire({
				title: 'Emin misiniz?',
				text: "Seçilen bilgiler silinicektir.",
				icon: 'Uyarı',
				showCancelButton: true,
				confirmButtonColor: '#3085d6',
				cancelButtonColor: '#d33',
				confirmButtonText: 'Evet',
				cancelButtonText: 'Hayır',
			}).then((result) => {

				if (result.isConfirmed) {
					FDelete(a);//Silme İşlemi (Evet demesi durumunda)
					const Toast = Swal.mixin({
						toast: true,
						position: 'top-end',
						showConfirmButton: false,
						timer: 2000,
						timerProgressBar: true,
						didOpen: (toast) => {
							toast.addEventListener('mouseenter', Swal.stopTimer)
							toast.addEventListener('mouseleave', Swal.resumeTimer)
						}
					})

					Toast.fire({
						icon: 'success',
						title: 'Silindi!'
					})
				}
			})
		};

		function FDelete(a) {
			console.log(a);
			$.ajax({
				contentType: "application/json",
				dataType: "json",
				type: "post",
				url: "/Experience/ExperienceDelete/" + a,
				success: function (func) {
					GetListX();
				}
			});
		}

		function ExperienceContentGet(a) {
			console.log(a);
			$.ajax({
				contentType: "application/json",
				dataType: "json",
				type: "post",
				url: "/Experience/ExperienceContent/" + a,
				success: function (func) {
					let exp = jQuery.parseJSON(func);
					console.log(exp);
					Swal.fire(
						exp.ExperienceCompanyName,
						exp.ExperienceContext,
						'info'
					)
				}
			});
		}


		$("#experienceadd").click(async function () {

			console.log("dasd");
			const { value: formValues } = await Swal.fire({
				title: 'Yeni Deneyim',
				showCancelButton: true,
				cancelButtonColor: '#d43f3a',
				cancelButtonText: 'İptal Et',
				confirmButtonText: 'Kaydet',
				confirmButtonColor: '#337ab7',
				html:
					'<input id="ExperienceCompanyName" placeholder="Firma Adını Giriniz" class="swal2-input">' +
					'<input id="ExperienceJobName" placeholder="Meslek Adını Giriniz" class="swal2-input">' +
					'<input id="ExperienceStartYear" placeholder="Başlangıç Yılı (00.00.0000)" class="swal2-input">' +
					'<input id="ExperienceStopYear" placeholder="Bitiş Yılı (00.00.0000)" class="swal2-input">' +
					'<textarea rows="10" cols="22" id="ExperienceContext" placeholder="Firma içinde ne iş yaptığınız hakkında bilgi veriniz." class="swal2-textarea"> </textarea>' +
					'<h5>Devam Ediyorum <input type="checkbox" id="ExperienceContinue" /></h5><p/>' +
					'<h5>Özgeçmiş sayfasında gösterme <input type="checkbox" id="ExperienceArchive" /></h5>',
				focusConfirm: false,
				preConfirm: () => {
					
					return [
						document.getElementById('ExperienceCompanyName').value,
						document.getElementById('ExperienceJobName').value,
						document.getElementById('ExperienceStartYear').value,
						document.getElementById('ExperienceStopYear').value,
						document.getElementById('ExperienceContext').value,
						document.getElementById('ExperienceContinue').checked,
						document.getElementById('ExperienceArchive').checked
						
					]
				}
			});
			//Checkbox'tan veri getir. ve gönder.
			$.ajax({
				url: '/Experience/AddExperience/',
				type: 'Post',
				dataType: 'json',
				data: {
					ExperienceCompanyName: formValues[0],
					ExperienceJobName: formValues[1],
					ExperienceStartYear: formValues[2],
					ExperienceStopYear: formValues[3],
					ExperienceContext: formValues[4],
					ExperienceContinue: formValues[5],
					ExperienceArchive: formValues[6]

				},
				success: function (gelen) {
				const Toast = Swal.mixin({
						toast: true,
						position: 'top-end',
						showConfirmButton: false,
						timer: 2000,
						timerProgressBar: true,
						didOpen: (toast) => {
							toast.addEventListener('mouseenter', Swal.stopTimer)
							toast.addEventListener('mouseleave', Swal.resumeTimer)
						}
					})

					Toast.fire({
						icon: 'success',
						title: 'Kaydedildi!'
					})
					GetListX();
				}
			});

		});
		function ExperienceUpdate(id) {
			console.log(id);
			$.ajax({
				contentType: "application/json",
				dataType: "json",
				type: "post",
				url: "/Experience/UpdateExperienceGet/" + id,
				success: function (func) {
					let exp=jQuery.parseJSON(func);

					ModalWindowsOpenWithData(exp);
				}
			});
		};

		async function ModalWindowsOpenWithData(data){
			let date = new Date(data.ExperienceStartYear);
			let dateconvert = date.getDay() + "." + (date.getMonth() + 1) +  "." + date.getFullYear();
			date = new Date(data.ExperienceStopYear);
			let dateconvertstop = date.getDay() + "." + (date.getMonth() + 1) +  "." + date.getFullYear();
			const { value: formValuesGet } = await Swal.fire({
				title: 'Deneyimi Düzenle',
				showCancelButton: true,
				cancelButtonColor: '#d43f3a',
				cancelButtonText: 'İptal Et',
				confirmButtonText: 'Düzenle',
				confirmButtonColor: '#32CD32',
				html:
					'<input id="ExperienceCompanyNameGet" placeholder="Firma Adını Giriniz" class="swal2-input" value=' + data.ExperienceCompanyName + '>' +
					'<input id="ExperienceJobNameGet" placeholder="Meslek Adını Giriniz" class="swal2-input" value=' + data.ExperienceJobName + '>' +
					'<input id="ExperienceStartYearGet" placeholder="Başlangıç Yılı (00.00.0000)" class="swal2-input" value=' + dateconvert + '>' +
					'<input id="ExperienceStopYearGet" placeholder="Bitiş Yılı (00.00.0000)" class="swal2-input" value=' + dateconvertstop + '> ' +
					'<textarea rows="10" cols="22" id="ExperienceContextGet" placeholder="Firma içinde ne iş yaptığınız hakkında bilgi veriniz." class="swal2-textarea"> ' + data.ExperienceContext + ' </textarea>' +
					'<h5>Devam Ediyorum <input type="checkbox" id="ExperienceContinueGet" ' + (data.ExperienceContinue ? 'checked' : '') + '/></h5><p/>' +
					'<h5>Özgeçmiş sayfasında gösterme <input type="checkbox" id="ExperienceArchiveGet" ' + (data.ExperienceArchive ? 'checked' : '') + ' /></h5>',
				focusConfirm: false,
				preConfirm: () => {

					return [
						data.ExperienceID,
						document.getElementById('ExperienceCompanyNameGet').value,
						document.getElementById('ExperienceJobNameGet').value,
						document.getElementById('ExperienceStartYearGet').value,
						document.getElementById('ExperienceStopYearGet').value,
						document.getElementById('ExperienceContextGet').value,
						document.getElementById('ExperienceContinueGet').checked,
						document.getElementById('ExperienceArchiveGet').checked

					]
				}
			});
			//dsdas
			console.log('dada')
			$.ajax({
				url: '/Experience/UpdateExperience/',
				type: 'Post',
				dataType: 'json',
				data: {
						ExperienceID: formValuesGet[0],
					ExperienceCompanyName: formValuesGet[1],
					ExperienceJobName: formValuesGet[2],
					ExperienceStartYear: formValuesGet[3],
					ExperienceStopYear: formValuesGet[4],
					ExperienceContext: formValuesGet[5],
					ExperienceContinue: formValuesGet[6],
					ExperienceArchive: formValuesGet[7],
				

				},
				success: function (getdate) {
					const Toast = Swal.mixin({
						toast: true,
						position: 'top-end',
						showConfirmButton: false,
						timer: 2000,
						timerProgressBar: true,
						didOpen: (toast) => {
							toast.addEventListener('mouseenter', Swal.stopTimer)
							toast.addEventListener('mouseleave', Swal.resumeTimer)
						}
					})

					Toast.fire({
						icon: 'success',
						title: 'Düzenlendi!'
					})
					GetListX();
				}
			});
			
		};

	</script>
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.2/font/bootstrap-icons.css">

